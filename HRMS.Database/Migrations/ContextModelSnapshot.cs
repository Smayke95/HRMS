// <auto-generated />
using System;
using HRMS.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HRMS.Database.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HRMS.Database.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 6,
                            Name = "Beograd",
                            ZipCode = ""
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 1,
                            Name = "Jablanica",
                            ZipCode = "88420"
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 1,
                            Name = "Konjic",
                            ZipCode = "88400"
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 5,
                            Name = "Ljubljana",
                            ZipCode = ""
                        },
                        new
                        {
                            Id = 5,
                            CountryId = 1,
                            Name = "Mostar",
                            ZipCode = "88000"
                        },
                        new
                        {
                            Id = 6,
                            CountryId = 2,
                            Name = "Priština",
                            ZipCode = ""
                        },
                        new
                        {
                            Id = 7,
                            CountryId = 1,
                            Name = "Sarajevo",
                            ZipCode = "71000"
                        },
                        new
                        {
                            Id = 8,
                            CountryId = 4,
                            Name = "Skoplje",
                            ZipCode = ""
                        },
                        new
                        {
                            Id = 9,
                            CountryId = 3,
                            Name = "Zagreb",
                            ZipCode = ""
                        },
                        new
                        {
                            Id = 10,
                            CountryId = 1,
                            Name = "Podgorica",
                            ZipCode = "81000"
                        },
                        new
                        {
                            Id = 11,
                            CountryId = 4,
                            Name = "Bitola",
                            ZipCode = "7000"
                        },
                        new
                        {
                            Id = 12,
                            CountryId = 3,
                            Name = "Split",
                            ZipCode = "21000"
                        });
                });

            modelBuilder.Entity("HRMS.Database.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Bosna i Hercegovina"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Crna Gora"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Hrvatska"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Makedonija"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Slovenija"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Srbija"
                        });
                });

            modelBuilder.Entity("HRMS.Database.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentDepartmentId")
                        .HasColumnType("int");

                    b.Property<int?>("SupervisorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentDepartmentId");

                    b.HasIndex("SupervisorId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Level = 0,
                            Name = "HRMS"
                        },
                        new
                        {
                            Id = 2,
                            Level = 1,
                            Name = "Odjel IT",
                            ParentDepartmentId = 1
                        },
                        new
                        {
                            Id = 3,
                            Level = 1,
                            Name = "Odjel REM",
                            ParentDepartmentId = 1
                        },
                        new
                        {
                            Id = 4,
                            Level = 1,
                            Name = "Odjel HR",
                            ParentDepartmentId = 1
                        },
                        new
                        {
                            Id = 5,
                            Level = 2,
                            Name = "Frontend tim",
                            ParentDepartmentId = 2
                        },
                        new
                        {
                            Id = 6,
                            Level = 2,
                            Name = "Backend tim",
                            ParentDepartmentId = 2
                        },
                        new
                        {
                            Id = 7,
                            Level = 2,
                            Name = "Database tim",
                            ParentDepartmentId = 2
                        });
                });

            modelBuilder.Entity("HRMS.Database.Models.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EQF")
                        .HasColumnType("int");

                    b.Property<string>("FinishedEducation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FinishedEducationOld")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ISCED")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Qualification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QualificationOld")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Educations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EQF = 1,
                            FinishedEducation = "Osnovno obrazovanje",
                            FinishedEducationOld = "Osnovna škola",
                            ISCED = "1/2A",
                            Qualification = "Nekvalificirani radnik",
                            QualificationOld = "Nekvalificirani radnik (NK)"
                        },
                        new
                        {
                            Id = 2,
                            EQF = 2,
                            FinishedEducation = "Programi stručnog osposobljavanja",
                            FinishedEducationOld = "Osnovna škola i stručna osposobljenost",
                            ISCED = "2B",
                            Qualification = "Niskokvalificirani radnik",
                            QualificationOld = "Polukvalificirani radnik (PKV)"
                        },
                        new
                        {
                            Id = 3,
                            EQF = 3,
                            FinishedEducation = "Srednje stručno obrazovanje i obuka",
                            FinishedEducationOld = "Trogodišnja srednja škola",
                            ISCED = "3C",
                            Qualification = "Kvalificirani radnik",
                            QualificationOld = "Kvalificirani radnik (KV)"
                        },
                        new
                        {
                            Id = 4,
                            EQF = 4,
                            FinishedEducation = "Srednje opće i tehničko obrazovanje",
                            FinishedEducationOld = "Četverogodišnja srednja škola",
                            ISCED = "3A/3B",
                            Qualification = "Opće ili specijalizirani kvalificirani radnik",
                            QualificationOld = "Srednja stručna sprema (SSS)"
                        },
                        new
                        {
                            Id = 5,
                            EQF = 5,
                            FinishedEducation = "Postsekundarno obrazovanje uključujući majstorske i srodne ispite",
                            FinishedEducationOld = "Specijalizacija na osnovu stručnosti srednjeg obrazovanja",
                            ISCED = "4A/4B",
                            Qualification = "Visokokvalificirani radnik specijaliziran za određeno zanimanje",
                            QualificationOld = "Visokokvalificiran radnik (VKV)"
                        },
                        new
                        {
                            Id = 6,
                            EQF = 6,
                            FinishedEducation = "Prvi ciklus visokog obrazovanja",
                            FinishedEducationOld = "Viša škola",
                            ISCED = "5B",
                            Qualification = "Bachelor ili Baccalaureat",
                            QualificationOld = "Viša stručna sprema (VŠS)"
                        },
                        new
                        {
                            Id = 7,
                            EQF = 7,
                            FinishedEducation = "Drugi ciklus visokog obrazovanja",
                            FinishedEducationOld = "Fakultet - osnovne studije / Specijalizacija",
                            ISCED = "5A",
                            Qualification = "Master",
                            QualificationOld = "Visoka stručna sprema (VSS) / Magistar specijalist"
                        },
                        new
                        {
                            Id = 8,
                            EQF = 8,
                            FinishedEducation = "Treći ciklus visokog obrazovanja",
                            FinishedEducationOld = "Magisterij / Doktorat",
                            ISCED = "5/6",
                            Qualification = "Doktorat",
                            QualificationOld = "Magistar nauka / Doktor nauka"
                        });
                });

            modelBuilder.Entity("HRMS.Database.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankAccount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("BirthPlaceId")
                        .HasColumnType("int");

                    b.Property<int?>("CitizenshipId")
                        .HasColumnType("int");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EducationId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaidenName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficePhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalIdentificationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PreviousLOSMonths")
                        .HasColumnType("int");

                    b.Property<int>("PreviousLOSYears")
                        .HasColumnType("int");

                    b.Property<string>("Profession")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkerCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BirthPlaceId");

                    b.HasIndex("CitizenshipId");

                    b.HasIndex("CityId");

                    b.HasIndex("EducationId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "4. Muslimanske brigade 20",
                            BankAccount = "",
                            BirthDate = new DateTime(1995, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthPlaceId = 7,
                            CitizenshipId = 1,
                            CityId = 3,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "anes@hrms.com",
                            FirstName = "Anes",
                            Gender = "Male",
                            Image = "",
                            LastName = "Smajić",
                            MaidenName = "",
                            Mobile = "38761234567",
                            Note = "",
                            OfficePhone = "38761234567",
                            ParentName = "",
                            Password = "19a2854144b63a8f7617a6f225019b12",
                            PersonalIdentificationNumber = "",
                            Phone = "38761234567",
                            PreviousLOSMonths = 0,
                            PreviousLOSYears = 0,
                            Profession = "Ekonomski tehničar",
                            RegistrationNumber = "1234567890123",
                            WorkerCode = "SA0001"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Dobrinja",
                            BankAccount = "",
                            BirthDate = new DateTime(1998, 5, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthPlaceId = 7,
                            CityId = 7,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "irena@hrms.com",
                            FirstName = "Irena",
                            Gender = "Female",
                            Image = "",
                            LastName = "Vilić",
                            MaidenName = "",
                            Mobile = "",
                            Note = "",
                            OfficePhone = "",
                            ParentName = "",
                            Password = "c99629a9aa107c23fe53e97433ea6b90",
                            PersonalIdentificationNumber = "",
                            Phone = "",
                            PreviousLOSMonths = 0,
                            PreviousLOSYears = 0,
                            Profession = "",
                            RegistrationNumber = "1234567890123",
                            WorkerCode = "SA0002"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Hrasnica",
                            BankAccount = "",
                            BirthDate = new DateTime(1998, 5, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthPlaceId = 7,
                            CityId = 7,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "meliha.k@hrms.com",
                            FirstName = "Meliha",
                            Gender = "Female",
                            Image = "",
                            LastName = "Kosnica",
                            MaidenName = "",
                            Mobile = "",
                            Note = "",
                            OfficePhone = "",
                            ParentName = "",
                            Password = "827ef6760e76932136c9e529169ecb9b",
                            PersonalIdentificationNumber = "",
                            Phone = "",
                            PreviousLOSMonths = 0,
                            PreviousLOSYears = 0,
                            Profession = "",
                            RegistrationNumber = "1234567890123",
                            WorkerCode = "SA0003"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Centar b.b.",
                            BankAccount = "",
                            BirthDate = new DateTime(1998, 5, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthPlaceId = 7,
                            CityId = 7,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mislava.s@hrms.com",
                            FirstName = "Mislava",
                            Gender = "Female",
                            Image = "",
                            LastName = "Šepović",
                            MaidenName = "",
                            Mobile = "",
                            Note = "",
                            OfficePhone = "",
                            ParentName = "",
                            Password = "827ef6760e76932136c9e529169ecb9b",
                            PersonalIdentificationNumber = "",
                            Phone = "",
                            PreviousLOSMonths = 0,
                            PreviousLOSYears = 0,
                            Profession = "",
                            RegistrationNumber = "1234567890123",
                            WorkerCode = "SA0004"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Aleja lipa 6",
                            BankAccount = "",
                            BirthDate = new DateTime(1998, 5, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthPlaceId = 7,
                            CityId = 7,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mileta.p@hrms.com",
                            FirstName = "Mileta",
                            Gender = "Female",
                            Image = "",
                            LastName = "Puček",
                            MaidenName = "",
                            Mobile = "",
                            Note = "",
                            OfficePhone = "",
                            ParentName = "",
                            Password = "827ef6760e76932136c9e529169ecb9b",
                            PersonalIdentificationNumber = "",
                            Phone = "",
                            PreviousLOSMonths = 0,
                            PreviousLOSYears = 0,
                            Profession = "",
                            RegistrationNumber = "1234567890123",
                            WorkerCode = "SA0005"
                        },
                        new
                        {
                            Id = 6,
                            Address = "Dr. Silvane Rizvanbegović",
                            BankAccount = "",
                            BirthDate = new DateTime(1998, 5, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthPlaceId = 7,
                            CityId = 7,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "arsenije.m@hrms.com",
                            FirstName = "Arsenije",
                            Gender = "Male",
                            Image = "",
                            LastName = "Murljačić",
                            MaidenName = "",
                            Mobile = "",
                            Note = "",
                            OfficePhone = "",
                            ParentName = "",
                            Password = "827ef6760e76932136c9e529169ecb9b",
                            PersonalIdentificationNumber = "",
                            Phone = "",
                            PreviousLOSMonths = 0,
                            PreviousLOSYears = 0,
                            Profession = "",
                            RegistrationNumber = "1234567890123",
                            WorkerCode = "SA0006"
                        },
                        new
                        {
                            Id = 7,
                            Address = "Željeznička",
                            BankAccount = "",
                            BirthDate = new DateTime(1998, 5, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthPlaceId = 7,
                            CityId = 7,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "stijepo.z@hrms.com",
                            FirstName = "Stijepo",
                            Gender = "Male",
                            Image = "",
                            LastName = "Željeznik",
                            MaidenName = "",
                            Mobile = "",
                            Note = "",
                            OfficePhone = "",
                            ParentName = "",
                            Password = "827ef6760e76932136c9e529169ecb9b",
                            PersonalIdentificationNumber = "",
                            Phone = "",
                            PreviousLOSMonths = 0,
                            PreviousLOSYears = 0,
                            Profession = "",
                            RegistrationNumber = "1234567890123",
                            WorkerCode = "SA0007"
                        },
                        new
                        {
                            Id = 8,
                            Address = "Hrasno",
                            BankAccount = "",
                            BirthDate = new DateTime(1998, 5, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthPlaceId = 7,
                            CityId = 7,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ana.r@hrms.com",
                            FirstName = "Ana",
                            Gender = "Female",
                            Image = "",
                            LastName = "Risojević",
                            MaidenName = "",
                            Mobile = "",
                            Note = "",
                            OfficePhone = "",
                            ParentName = "",
                            Password = "827ef6760e76932136c9e529169ecb9b",
                            PersonalIdentificationNumber = "",
                            Phone = "",
                            PreviousLOSMonths = 0,
                            PreviousLOSYears = 0,
                            Profession = "",
                            RegistrationNumber = "1234567890123",
                            WorkerCode = "SA0008"
                        },
                        new
                        {
                            Id = 9,
                            Address = "Hrasno",
                            BankAccount = "",
                            BirthDate = new DateTime(1998, 5, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthPlaceId = 7,
                            CityId = 7,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "dagmar.j@hrms.com",
                            FirstName = "Dagmar",
                            Gender = "Male",
                            Image = "",
                            LastName = "Jurić",
                            MaidenName = "",
                            Mobile = "",
                            Note = "",
                            OfficePhone = "",
                            ParentName = "",
                            Password = "827ef6760e76932136c9e529169ecb9b",
                            PersonalIdentificationNumber = "",
                            Phone = "",
                            PreviousLOSMonths = 0,
                            PreviousLOSYears = 0,
                            Profession = "",
                            RegistrationNumber = "1234567890123",
                            WorkerCode = "SA0009"
                        },
                        new
                        {
                            Id = 10,
                            Address = "Centar",
                            BankAccount = "",
                            BirthDate = new DateTime(1998, 5, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthPlaceId = 7,
                            CityId = 7,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ira.k@hrms.com",
                            FirstName = "Ira",
                            Gender = "Female",
                            Image = "",
                            LastName = "Kerežija",
                            MaidenName = "",
                            Mobile = "",
                            Note = "",
                            OfficePhone = "",
                            ParentName = "",
                            Password = "827ef6760e76932136c9e529169ecb9b",
                            PersonalIdentificationNumber = "",
                            Phone = "",
                            PreviousLOSMonths = 0,
                            PreviousLOSYears = 0,
                            Profession = "",
                            RegistrationNumber = "1234567890123",
                            WorkerCode = "SA0010"
                        },
                        new
                        {
                            Id = 11,
                            Address = "Centar",
                            BankAccount = "",
                            BirthDate = new DateTime(1998, 5, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthPlaceId = 5,
                            CityId = 5,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sanja.t@hrms.com",
                            FirstName = "Sanja",
                            Gender = "Female",
                            Image = "",
                            LastName = "Terzić",
                            MaidenName = "",
                            Mobile = "",
                            Note = "",
                            OfficePhone = "",
                            ParentName = "",
                            Password = "827ef6760e76932136c9e529169ecb9b",
                            PersonalIdentificationNumber = "",
                            Phone = "",
                            PreviousLOSMonths = 0,
                            PreviousLOSYears = 0,
                            Profession = "",
                            RegistrationNumber = "1234567890123",
                            WorkerCode = "SA0011"
                        },
                        new
                        {
                            Id = 12,
                            Address = "Zalik",
                            BankAccount = "",
                            BirthDate = new DateTime(1998, 5, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthPlaceId = 5,
                            CityId = 5,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "josip.t@hrms.com",
                            FirstName = "Josip",
                            Gender = "Male",
                            Image = "",
                            LastName = "Tiro",
                            MaidenName = "",
                            Mobile = "",
                            Note = "",
                            OfficePhone = "",
                            ParentName = "",
                            Password = "827ef6760e76932136c9e529169ecb9b",
                            PersonalIdentificationNumber = "",
                            Phone = "",
                            PreviousLOSMonths = 0,
                            PreviousLOSYears = 0,
                            Profession = "",
                            RegistrationNumber = "1234567890123",
                            WorkerCode = "SA0012"
                        });
                });

            modelBuilder.Entity("HRMS.Database.Models.EmployeePosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("Date");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("Date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VacationDays")
                        .HasColumnType("int");

                    b.Property<string>("WorkingHours")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PositionId");

                    b.ToTable("EmployeePositions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EmployeeId = 1,
                            EndDate = new DateTime(2024, 2, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PositionId = 6,
                            Salary = 0m,
                            StartDate = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Active",
                            Type = "Fixed",
                            VacationDays = 30,
                            WorkingHours = "09:00-17:00"
                        },
                        new
                        {
                            Id = 2,
                            EmployeeId = 2,
                            EndDate = new DateTime(2023, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PositionId = 5,
                            Salary = 0m,
                            StartDate = new DateTime(2021, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Inactive",
                            Type = "Fixed",
                            VacationDays = 30,
                            WorkingHours = "09:00-17:00"
                        },
                        new
                        {
                            Id = 3,
                            EmployeeId = 3,
                            EndDate = new DateTime(2024, 2, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PositionId = 2,
                            Salary = 0m,
                            StartDate = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Active",
                            Type = "Fixed",
                            VacationDays = 30,
                            WorkingHours = "09:00-17:00"
                        },
                        new
                        {
                            Id = 4,
                            EmployeeId = 4,
                            EndDate = new DateTime(2024, 2, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PositionId = 3,
                            Salary = 0m,
                            StartDate = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Active",
                            Type = "Fixed",
                            VacationDays = 30,
                            WorkingHours = "09:00-17:00"
                        },
                        new
                        {
                            Id = 5,
                            EmployeeId = 5,
                            EndDate = new DateTime(2024, 2, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PositionId = 4,
                            Salary = 0m,
                            StartDate = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Active",
                            Type = "Fixed",
                            VacationDays = 30,
                            WorkingHours = "09:00-17:00"
                        },
                        new
                        {
                            Id = 6,
                            EmployeeId = 6,
                            EndDate = new DateTime(2024, 2, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PositionId = 2,
                            Salary = 0m,
                            StartDate = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Active",
                            Type = "Fixed",
                            VacationDays = 30,
                            WorkingHours = "09:00-17:00"
                        },
                        new
                        {
                            Id = 7,
                            EmployeeId = 7,
                            EndDate = new DateTime(2024, 2, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PositionId = 3,
                            Salary = 0m,
                            StartDate = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Active",
                            Type = "Fixed",
                            VacationDays = 30,
                            WorkingHours = "09:00-17:00"
                        },
                        new
                        {
                            Id = 8,
                            EmployeeId = 8,
                            EndDate = new DateTime(2024, 2, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PositionId = 3,
                            Salary = 0m,
                            StartDate = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Active",
                            Type = "Fixed",
                            VacationDays = 30,
                            WorkingHours = "09:00-17:00"
                        },
                        new
                        {
                            Id = 9,
                            EmployeeId = 9,
                            EndDate = new DateTime(2024, 2, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PositionId = 2,
                            Salary = 0m,
                            StartDate = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Active",
                            Type = "Fixed",
                            VacationDays = 30,
                            WorkingHours = "09:00-17:00"
                        },
                        new
                        {
                            Id = 10,
                            EmployeeId = 10,
                            EndDate = new DateTime(2024, 2, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PositionId = 2,
                            Salary = 0m,
                            StartDate = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Active",
                            Type = "Fixed",
                            VacationDays = 30,
                            WorkingHours = "09:00-17:00"
                        });
                });

            modelBuilder.Entity("HRMS.Database.Models.EmployeeRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EmployeeId = 1,
                            Role = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            EmployeeId = 1,
                            Role = "Manager"
                        },
                        new
                        {
                            Id = 3,
                            EmployeeId = 1,
                            Role = "Employee"
                        },
                        new
                        {
                            Id = 4,
                            EmployeeId = 2,
                            Role = "Manager"
                        },
                        new
                        {
                            Id = 5,
                            EmployeeId = 2,
                            Role = "Employee"
                        },
                        new
                        {
                            Id = 6,
                            EmployeeId = 3,
                            Role = "Employee"
                        },
                        new
                        {
                            Id = 7,
                            EmployeeId = 4,
                            Role = "Employee"
                        },
                        new
                        {
                            Id = 8,
                            EmployeeId = 5,
                            Role = "Employee"
                        },
                        new
                        {
                            Id = 9,
                            EmployeeId = 6,
                            Role = "Employee"
                        },
                        new
                        {
                            Id = 10,
                            EmployeeId = 7,
                            Role = "Employee"
                        },
                        new
                        {
                            Id = 11,
                            EmployeeId = 8,
                            Role = "Employee"
                        },
                        new
                        {
                            Id = 12,
                            EmployeeId = 9,
                            Role = "Employee"
                        },
                        new
                        {
                            Id = 13,
                            EmployeeId = 10,
                            Role = "Employee"
                        });
                });

            modelBuilder.Entity("HRMS.Database.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EventTypeId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "",
                            EmployeeId = 1,
                            EndDate = new DateTime(2023, 8, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventTypeId = 3,
                            Name = "Bolovanje",
                            StartDate = new DateTime(2023, 8, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "",
                            EmployeeId = 1,
                            EndDate = new DateTime(2023, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventTypeId = 2,
                            Name = "Kurban Bajram",
                            StartDate = new DateTime(2023, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0
                        },
                        new
                        {
                            Id = 3,
                            Description = "",
                            EmployeeId = 3,
                            EndDate = new DateTime(2023, 9, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventTypeId = 1,
                            Name = "Godišnji odmor",
                            StartDate = new DateTime(2023, 8, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2
                        },
                        new
                        {
                            Id = 4,
                            Description = "",
                            EmployeeId = 1,
                            EndDate = new DateTime(2023, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventTypeId = 4,
                            Name = "Stručna obuka",
                            StartDate = new DateTime(2023, 8, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 3
                        },
                        new
                        {
                            Id = 5,
                            Description = "",
                            EmployeeId = 5,
                            EndDate = new DateTime(2023, 9, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventTypeId = 5,
                            Name = "Sarajevski Film Festival",
                            StartDate = new DateTime(2023, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            Id = 6,
                            Description = "",
                            EmployeeId = 6,
                            EndDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventTypeId = 2,
                            Name = "Poslovni put - Zagreb",
                            StartDate = new DateTime(2023, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            Id = 7,
                            Description = "",
                            EmployeeId = 7,
                            EndDate = new DateTime(2023, 8, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventTypeId = 3,
                            Name = "Oproštajna večera za kolegu",
                            StartDate = new DateTime(2023, 8, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            Id = 8,
                            Description = "",
                            EmployeeId = 1,
                            EndDate = new DateTime(2023, 9, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventTypeId = 4,
                            Name = "Timski izlet na planinu",
                            StartDate = new DateTime(2023, 9, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            Id = 9,
                            Description = "",
                            EmployeeId = 9,
                            EndDate = new DateTime(2023, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventTypeId = 4,
                            Name = "Seminar o liderstvu",
                            StartDate = new DateTime(2023, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            Id = 10,
                            Description = "",
                            EmployeeId = 10,
                            EndDate = new DateTime(2023, 9, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventTypeId = 1,
                            Name = "Sportski turnir - fudbal",
                            StartDate = new DateTime(2023, 9, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            Id = 11,
                            Description = "",
                            EmployeeId = 1,
                            EndDate = new DateTime(2023, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventTypeId = 3,
                            Name = "Prezentacija novog proizvoda",
                            StartDate = new DateTime(2023, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            Id = 12,
                            Description = "",
                            EmployeeId = 2,
                            EndDate = new DateTime(2023, 10, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventTypeId = 5,
                            Name = "Radionica o stresu",
                            StartDate = new DateTime(2023, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            Id = 13,
                            Description = "",
                            EmployeeId = 1,
                            EndDate = new DateTime(2023, 12, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventTypeId = 2,
                            Name = "Praznična proslava",
                            StartDate = new DateTime(2023, 12, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            Id = 14,
                            Description = "",
                            EmployeeId = 1,
                            EndDate = new DateTime(2023, 8, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventTypeId = 1,
                            Name = "Timski sastanak",
                            StartDate = new DateTime(2023, 8, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            Id = 15,
                            Description = "",
                            EmployeeId = 5,
                            EndDate = new DateTime(2023, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventTypeId = 5,
                            Name = "Volonterska akcija - čišćenje parka",
                            StartDate = new DateTime(2023, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            Id = 16,
                            Description = "",
                            EmployeeId = 6,
                            EndDate = new DateTime(2023, 10, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventTypeId = 4,
                            Name = "Rad od kuće - Remote Week",
                            StartDate = new DateTime(2023, 10, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            Id = 17,
                            Description = "",
                            EmployeeId = 7,
                            EndDate = new DateTime(2023, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventTypeId = 1,
                            Name = "Prezentacija poslovnih rezultata",
                            StartDate = new DateTime(2023, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            Id = 18,
                            Description = "",
                            EmployeeId = 1,
                            EndDate = new DateTime(2023, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventTypeId = 3,
                            Name = "Timski izlet na jezero",
                            StartDate = new DateTime(2023, 9, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            Id = 19,
                            Description = "",
                            EmployeeId = 2,
                            EndDate = new DateTime(2023, 10, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventTypeId = 4,
                            Name = "Trening radionica - Upravljanje vremenom",
                            StartDate = new DateTime(2023, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            Id = 20,
                            Description = "",
                            EmployeeId = 2,
                            EndDate = new DateTime(2023, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventTypeId = 1,
                            Name = "Timski sastanak - Planiranje Q4 projekata",
                            StartDate = new DateTime(2023, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            Id = 21,
                            Description = "",
                            EmployeeId = 2,
                            EndDate = new DateTime(2023, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventTypeId = 4,
                            Name = "Seminar o komunikaciji",
                            StartDate = new DateTime(2023, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            Id = 22,
                            Description = "",
                            EmployeeId = 2,
                            EndDate = new DateTime(2023, 11, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventTypeId = 3,
                            Name = "Poslovni ručak sa partnerima",
                            StartDate = new DateTime(2023, 11, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            Id = 23,
                            Description = "",
                            EmployeeId = 2,
                            EndDate = new DateTime(2023, 12, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventTypeId = 3,
                            Name = "Sastanak sa klijentima",
                            StartDate = new DateTime(2023, 12, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        });
                });

            modelBuilder.Entity("HRMS.Database.Models.EventType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsApprovalRequired")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EventTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "#4caf50",
                            IsApprovalRequired = true,
                            Name = "Godišnji odmor"
                        },
                        new
                        {
                            Id = 2,
                            Color = "#1e88e5",
                            IsApprovalRequired = true,
                            Name = "Vjerski praznik"
                        },
                        new
                        {
                            Id = 3,
                            Color = "#ff9800",
                            IsApprovalRequired = true,
                            Name = "Bolovanje"
                        },
                        new
                        {
                            Id = 4,
                            Color = "#3a87ad",
                            IsApprovalRequired = true,
                            Name = "Plaćeno odsustvo"
                        },
                        new
                        {
                            Id = 5,
                            Color = "#fb1b1b",
                            IsApprovalRequired = true,
                            Name = "Neplaćeno odsustvo"
                        },
                        new
                        {
                            Id = 6,
                            Color = "#9c27b0",
                            IsApprovalRequired = true,
                            Name = "Obuka"
                        },
                        new
                        {
                            Id = 7,
                            Color = "#795548",
                            IsApprovalRequired = false,
                            Name = "Timski sastanak"
                        });
                });

            modelBuilder.Entity("HRMS.Database.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Room")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EmployeeId = 1,
                            Room = "Anes Smajić & Irena Vilić",
                            Text = "Dobro jutro Irena",
                            Time = new DateTime(2023, 7, 22, 12, 1, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            EmployeeId = 1,
                            Room = "Anes Smajić & Irena Vilić",
                            Text = "Kako si danas?",
                            Time = new DateTime(2023, 7, 22, 12, 2, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            EmployeeId = 2,
                            Room = "Anes Smajić & Irena Vilić",
                            Text = "Jutro Anese",
                            Time = new DateTime(2023, 7, 22, 12, 3, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            EmployeeId = 2,
                            Room = "Anes Smajić & Irena Vilić",
                            Text = "Odlično sam, hvala. Kako si ti?",
                            Time = new DateTime(2023, 7, 22, 12, 4, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            EmployeeId = 1,
                            Room = "Anes Smajić & Irena Vilić",
                            Text = "Također dobro, hvala. Imaš li neki plan za danas?",
                            Time = new DateTime(2023, 7, 22, 12, 5, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            EmployeeId = 2,
                            Room = "Anes Smajić & Irena Vilić",
                            Text = "Da, imam par sastanaka i trebam završiti taj novi izvještaj do kraja dana",
                            Time = new DateTime(2023, 7, 22, 12, 6, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            EmployeeId = 2,
                            Room = "Anes Smajić & Irena Vilić",
                            Text = "A ti?",
                            Time = new DateTime(2023, 7, 22, 12, 7, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            EmployeeId = 1,
                            Room = "Anes Smajić & Irena Vilić",
                            Text = "Također imam sastanak ujutro",
                            Time = new DateTime(2023, 7, 22, 12, 8, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            EmployeeId = 1,
                            Room = "Anes Smajić & Irena Vilić",
                            Text = "ali popodne imam nekoliko sati slobodno",
                            Time = new DateTime(2023, 7, 22, 12, 9, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10,
                            EmployeeId = 1,
                            Room = "Anes Smajić & Irena Vilić",
                            Text = "Planiram završiti projekt koji radim",
                            Time = new DateTime(2023, 7, 22, 12, 10, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 11,
                            EmployeeId = 2,
                            Room = "Anes Smajić & Irena Vilić",
                            Text = "Zvuči kao da ćeš imati produktivan dan. Treba li ti ikakva pomoć s tim projektom?",
                            Time = new DateTime(2023, 7, 22, 12, 11, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 12,
                            EmployeeId = 1,
                            Room = "Anes Smajić & Irena Vilić",
                            Text = "Hvala na ponudi. Možda ću morati provjeriti neke podatke, pa ako imam pitanja, sigurno ću ti se obratiti",
                            Time = new DateTime(2023, 7, 22, 12, 12, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 13,
                            EmployeeId = 2,
                            Room = "Anes Smajić & Irena Vilić",
                            Text = "Svakako, uvijek sam tu da pomognem",
                            Time = new DateTime(2023, 7, 22, 12, 13, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 14,
                            EmployeeId = 2,
                            Room = "Anes Smajić & Irena Vilić",
                            Text = "Inače",
                            Time = new DateTime(2023, 7, 22, 12, 14, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 15,
                            EmployeeId = 2,
                            Room = "Anes Smajić & Irena Vilić",
                            Text = "što misliš o novom uređenju ureda?",
                            Time = new DateTime(2023, 7, 22, 12, 15, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 16,
                            EmployeeId = 1,
                            Room = "Anes Smajić & Irena Vilić",
                            Text = "Meni se sviđa! Osjećam se puno udobnije u ovom novom okruženju",
                            Time = new DateTime(2023, 7, 22, 12, 16, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 17,
                            EmployeeId = 1,
                            Room = "Anes Smajić & Irena Vilić",
                            Text = "A tebi?",
                            Time = new DateTime(2023, 7, 22, 12, 17, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 18,
                            EmployeeId = 2,
                            Room = "Anes Smajić & Irena Vilić",
                            Text = "Potpuno se slažem",
                            Time = new DateTime(2023, 7, 22, 12, 18, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 19,
                            EmployeeId = 2,
                            Room = "Anes Smajić & Irena Vilić",
                            Text = "Ovo je puno svjetlije i prostranije",
                            Time = new DateTime(2023, 7, 22, 12, 19, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 20,
                            EmployeeId = 2,
                            Room = "Anes Smajić & Irena Vilić",
                            Text = "Nekako mi daje više inspiracije za rad",
                            Time = new DateTime(2023, 7, 22, 12, 20, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 21,
                            EmployeeId = 1,
                            Room = "Anes Smajić & Irena Vilić",
                            Text = "Da, baš tako! Volim kako je timski duh u ovom uredu, svi surađujemo tako dobro",
                            Time = new DateTime(2023, 7, 22, 12, 21, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 22,
                            EmployeeId = 2,
                            Room = "Anes Smajić & Irena Vilić",
                            Text = "Upravo tako!",
                            Time = new DateTime(2023, 7, 22, 12, 22, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 23,
                            EmployeeId = 2,
                            Room = "Anes Smajić & Irena Vilić",
                            Text = "Baš zbog toga nam i ide ovako dobro",
                            Time = new DateTime(2023, 7, 22, 12, 23, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 24,
                            EmployeeId = 1,
                            Room = "Anes Smajić & Irena Vilić",
                            Text = "Tako je. Sve u svemu, zadovoljan sam kako stvari idu na poslu",
                            Time = new DateTime(2023, 7, 22, 12, 24, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 25,
                            EmployeeId = 2,
                            Room = "Anes Smajić & Irena Vilić",
                            Text = "I ja isto! Ako ikada trebaš razgovarati o bilo čemu ili trebaš pomoć, slobodno mi se obrati",
                            Time = new DateTime(2023, 7, 22, 12, 25, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 26,
                            EmployeeId = 1,
                            Room = "Anes Smajić & Irena Vilić",
                            Text = "Hvala Irena",
                            Time = new DateTime(2023, 7, 22, 12, 26, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 27,
                            EmployeeId = 1,
                            Room = "Anes Smajić & Irena Vilić",
                            Text = "Cijenim to",
                            Time = new DateTime(2023, 7, 22, 12, 27, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 28,
                            EmployeeId = 2,
                            Room = "Anes Smajić & Irena Vilić",
                            Text = "Nema na čemu. Sada se moram vratiti radu, ali ako želiš, možemo se kasnije ponovno čuti.",
                            Time = new DateTime(2023, 7, 22, 12, 28, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 29,
                            EmployeeId = 1,
                            Room = "Anes Smajić & Irena Vilić",
                            Text = "U redu, zvuči dobro. Sretno s tvojim sastancima i projektom!",
                            Time = new DateTime(2023, 7, 22, 12, 29, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 30,
                            EmployeeId = 2,
                            Room = "Anes Smajić & Irena Vilić",
                            Text = "Hvala! I tebi želim uspješan dan",
                            Time = new DateTime(2023, 7, 22, 12, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 31,
                            EmployeeId = 2,
                            Room = "Anes Smajić & Irena Vilić",
                            Text = "Čujemo se kasnije",
                            Time = new DateTime(2023, 7, 22, 12, 31, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 32,
                            EmployeeId = 1,
                            Room = "Anes Smajić & Irena Vilić",
                            Text = "Čujemo se",
                            Time = new DateTime(2023, 7, 22, 12, 32, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("HRMS.Database.Models.PayGrade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("MaxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MinAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PayGrades");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MaxAmount = 10000m,
                            MinAmount = 4000m,
                            Name = "A1"
                        },
                        new
                        {
                            Id = 2,
                            MaxAmount = 5000m,
                            MinAmount = 4000m,
                            Name = "A2"
                        },
                        new
                        {
                            Id = 3,
                            MaxAmount = 4000m,
                            MinAmount = 3000m,
                            Name = "A3"
                        },
                        new
                        {
                            Id = 4,
                            MaxAmount = 3000m,
                            MinAmount = 2500m,
                            Name = "B1"
                        },
                        new
                        {
                            Id = 5,
                            MaxAmount = 2500m,
                            MinAmount = 2000m,
                            Name = "B2"
                        },
                        new
                        {
                            Id = 6,
                            MaxAmount = 2000m,
                            MinAmount = 500m,
                            Name = "C"
                        });
                });

            modelBuilder.Entity("HRMS.Database.Models.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsWorkExperienceRequired")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PayGradeId")
                        .HasColumnType("int");

                    b.Property<int>("RequiredEducationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("PayGradeId");

                    b.HasIndex("RequiredEducationId");

                    b.ToTable("Positions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DepartmentId = 1,
                            IsWorkExperienceRequired = true,
                            Name = "Generalni direktor",
                            PayGradeId = 1,
                            RequiredEducationId = 7
                        },
                        new
                        {
                            Id = 2,
                            DepartmentId = 2,
                            IsWorkExperienceRequired = true,
                            Name = "Direktor IT odjela",
                            PayGradeId = 3,
                            RequiredEducationId = 6
                        },
                        new
                        {
                            Id = 3,
                            DepartmentId = 3,
                            IsWorkExperienceRequired = true,
                            Name = "Direktor REM odjela",
                            PayGradeId = 2,
                            RequiredEducationId = 6
                        },
                        new
                        {
                            Id = 4,
                            DepartmentId = 4,
                            IsWorkExperienceRequired = true,
                            Name = "Direktor HR odjela",
                            PayGradeId = 3,
                            RequiredEducationId = 6
                        },
                        new
                        {
                            Id = 5,
                            DepartmentId = 5,
                            IsWorkExperienceRequired = true,
                            Name = "Voditelj Frontend tima",
                            PayGradeId = 4,
                            RequiredEducationId = 6
                        },
                        new
                        {
                            Id = 6,
                            DepartmentId = 6,
                            IsWorkExperienceRequired = true,
                            Name = "Voditelj Backend tima",
                            PayGradeId = 4,
                            RequiredEducationId = 6
                        },
                        new
                        {
                            Id = 7,
                            DepartmentId = 7,
                            IsWorkExperienceRequired = true,
                            Name = "Voditelj Database tima",
                            PayGradeId = 4,
                            RequiredEducationId = 6
                        },
                        new
                        {
                            Id = 8,
                            DepartmentId = 5,
                            IsWorkExperienceRequired = true,
                            Name = "Software developer",
                            PayGradeId = 5,
                            RequiredEducationId = 6
                        },
                        new
                        {
                            Id = 9,
                            DepartmentId = 6,
                            IsWorkExperienceRequired = false,
                            Name = "Designer",
                            PayGradeId = 5,
                            RequiredEducationId = 4
                        },
                        new
                        {
                            Id = 10,
                            DepartmentId = 7,
                            IsWorkExperienceRequired = true,
                            Name = "Database administrator",
                            PayGradeId = 5,
                            RequiredEducationId = 4
                        },
                        new
                        {
                            Id = 11,
                            DepartmentId = 4,
                            IsWorkExperienceRequired = true,
                            Name = "Viši stručni saradnik za upravljanje ljudskim resursima",
                            PayGradeId = 4,
                            RequiredEducationId = 6
                        },
                        new
                        {
                            Id = 12,
                            DepartmentId = 4,
                            IsWorkExperienceRequired = false,
                            Name = "Stručni saradnik za upravljanje ljudskim resursima",
                            PayGradeId = 5,
                            RequiredEducationId = 4
                        },
                        new
                        {
                            Id = 13,
                            DepartmentId = 3,
                            IsWorkExperienceRequired = false,
                            Name = "Čistač",
                            PayGradeId = 6,
                            RequiredEducationId = 1
                        });
                });

            modelBuilder.Entity("HRMS.Database.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Sanovo Group je kompanija sa sjedistem u Danskoj. Bave se proizvodnjom masina za preradu jaja.",
                            Name = "Sanovo Group"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Designa je kompanija sa sjedistem u Norveskoj. Bave se proizvodnjom elemenata za kuhinje, kupatila i spavace sobe.",
                            Name = "Designa"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Autokonzept je projekat napravljen za Danskog klijenta. Svrha sistema je iznajmljivanje automobila.",
                            Name = "Autokonzept"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Vejers je sistem napravljen za iznajmljivanje kuca na jugu Danske, iznajmljivanje se vrsi preko Booking studija.",
                            Name = "Vejers"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Medicinska Oprema BH je projekat usmjeren na prodaju medicinske opreme i potrošnih materijala u Bosni i Hercegovini.",
                            Name = "Medicinska Oprema BH"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Art Galerija Sarajevo je online platforma za prodaju umjetničkih djela, sa fokusom na lokalne umjetnike iz Sarajeva.",
                            Name = "Art Galerija Sarajevo"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Restoran GastroMIX je restoran specijaliziran za internacionalnu kuhinju sa naglaskom na fusion jelima.",
                            Name = "Restoran GastroMIX"
                        },
                        new
                        {
                            Id = 8,
                            Description = "IT Konsalting BH pruža IT konsultantske usluge za kompanije u Bosni i Hercegovini, sa ciljem optimizacije poslovnih procesa.",
                            Name = "IT Konsalting BH"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Turistička Agencija Sarajevo Explorer se bavi organizacijom turističkih tura i putovanja u Sarajevu i okolini, promovišući kulturno i prirodno bogatstvo regije.",
                            Name = "Turistička Agencija Sarajevo Explorer"
                        },
                        new
                        {
                            Id = 10,
                            Description = "EduTech BH je projekat usmjeren na razvoj edukativnih tehnologija za bolje obrazovanje u Bosni i Hercegovini.",
                            Name = "EduTech BH"
                        });
                });

            modelBuilder.Entity("HRMS.Database.Models.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int?>("TaskStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("TaskTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TaskStatusId");

                    b.HasIndex("TaskTypeId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Napraviti markup po datom dizajnu.",
                            EmployeeId = 1,
                            Name = "Markup",
                            ProjectId = 1,
                            TaskStatusId = 1,
                            TaskTypeId = 2
                        },
                        new
                        {
                            Id = 2,
                            Description = "Odraditi integraciju newsletter signup-a.",
                            EmployeeId = 2,
                            Name = "Mailchimp",
                            ProjectId = 1,
                            TaskStatusId = 2,
                            TaskTypeId = 1
                        },
                        new
                        {
                            Id = 3,
                            Description = "Napraviti banner komponentu.",
                            EmployeeId = 2,
                            Name = "Banner komponenta",
                            ProjectId = 3,
                            TaskStatusId = 3,
                            TaskTypeId = 1
                        },
                        new
                        {
                            Id = 4,
                            Description = "Ispraviti footer prema dizajnu.",
                            EmployeeId = 1,
                            Name = "Popraviti bug u footer-u",
                            ProjectId = 4,
                            TaskStatusId = 4,
                            TaskTypeId = 2
                        },
                        new
                        {
                            Id = 5,
                            Description = "Optimizirati upite u bazi podataka radi poboljšane performanse.",
                            EmployeeId = 3,
                            Name = "Optimizacija Baze Podataka",
                            ProjectId = 2,
                            TaskStatusId = 1,
                            TaskTypeId = 3
                        },
                        new
                        {
                            Id = 6,
                            Description = "Implementirati novu funkcionalnost prema zahtjevima klijenta.",
                            EmployeeId = 4,
                            Name = "Implementacija Nove Funkcionalnosti",
                            ProjectId = 5,
                            TaskStatusId = 2,
                            TaskTypeId = 2
                        },
                        new
                        {
                            Id = 7,
                            Description = "Unaprijediti korisničko sučelje radi boljeg korisničkog iskustva.",
                            EmployeeId = 5,
                            Name = "Unapređenje Korisničkog Sučelja",
                            ProjectId = 7,
                            TaskStatusId = 3,
                            TaskTypeId = 3
                        },
                        new
                        {
                            Id = 8,
                            Description = "Ažurirati dokumentaciju projekta s najnovijim promjenama.",
                            EmployeeId = 6,
                            Name = "Ažuriranje Dokumentacije",
                            ProjectId = 9,
                            TaskStatusId = 4,
                            TaskTypeId = 5
                        },
                        new
                        {
                            Id = 9,
                            Description = "Izvršiti istraživanje novih tehnologija za buduće projekte.",
                            EmployeeId = 7,
                            Name = "Istraživanje Novih Tehnologija",
                            ProjectId = 10,
                            TaskStatusId = 1,
                            TaskTypeId = 6
                        },
                        new
                        {
                            Id = 10,
                            Description = "Izvršiti sigurnosnu reviziju sustava kako bi se identificirale ranjivosti.",
                            EmployeeId = 8,
                            Name = "Sigurnosna Revizija",
                            ProjectId = 8,
                            TaskStatusId = 2,
                            TaskTypeId = 6
                        });
                });

            modelBuilder.Entity("HRMS.Database.Models.TaskComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskComments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Task preuzet dana 19.8. i stavljen 'In progress'.",
                            EmployeeId = 1,
                            TaskId = 1,
                            Time = new DateTime(2023, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Content = "Task zavrsen.",
                            EmployeeId = 2,
                            TaskId = 2,
                            Time = new DateTime(2023, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Content = "Hvala na preuzimanju zadatka. Pogledat ću dizajn i krenuti s markup-om.",
                            EmployeeId = 3,
                            TaskId = 1,
                            Time = new DateTime(2023, 8, 31, 22, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            Content = "Nema na čemu! Ako imate bilo kakvih pitanja, slobodno pitajte.",
                            EmployeeId = 1,
                            TaskId = 1,
                            Time = new DateTime(2023, 8, 31, 23, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            Content = "Task označen kao 'In progress'. Radim na integraciji s Mailchimp-om.",
                            EmployeeId = 4,
                            TaskId = 2,
                            Time = new DateTime(2023, 8, 31, 21, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            Content = "Super! Javite ako naiđete na bilo kakve prepreke.",
                            EmployeeId = 2,
                            TaskId = 2,
                            Time = new DateTime(2023, 8, 31, 22, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            Content = "Banner komponenta uspješno dodana projektu. Čeka se vaš feedback.",
                            EmployeeId = 5,
                            TaskId = 3,
                            Time = new DateTime(2023, 8, 31, 20, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            Content = "Izgleda odlično! Samo malo promijenite nijanse boja.",
                            EmployeeId = 3,
                            TaskId = 3,
                            Time = new DateTime(2023, 8, 31, 21, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            Content = "Bug u footer-u uspješno riješen.",
                            EmployeeId = 6,
                            TaskId = 4,
                            Time = new DateTime(2023, 8, 31, 19, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10,
                            Content = "Savršeno! Zatvaram task.",
                            EmployeeId = 4,
                            TaskId = 4,
                            Time = new DateTime(2023, 8, 31, 20, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("HRMS.Database.Models.TaskStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TaskStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Kreiran"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Aktivan"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Riješen"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Zatvoren"
                        });
                });

            modelBuilder.Entity("HRMS.Database.Models.TaskType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TaskTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Bug"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Feature"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Poboljšanje"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Održavanje"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Dokumentovanje"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Istraživanje"
                        });
                });

            modelBuilder.Entity("HRMS.Database.Models.City", b =>
                {
                    b.HasOne("HRMS.Database.Models.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("HRMS.Database.Models.Department", b =>
                {
                    b.HasOne("HRMS.Database.Models.Department", "ParentDepartment")
                        .WithMany("ChildDepartments")
                        .HasForeignKey("ParentDepartmentId");

                    b.HasOne("HRMS.Database.Models.Employee", "Supervisor")
                        .WithMany("Departments")
                        .HasForeignKey("SupervisorId");

                    b.Navigation("ParentDepartment");

                    b.Navigation("Supervisor");
                });

            modelBuilder.Entity("HRMS.Database.Models.Employee", b =>
                {
                    b.HasOne("HRMS.Database.Models.City", "BirthPlace")
                        .WithMany()
                        .HasForeignKey("BirthPlaceId");

                    b.HasOne("HRMS.Database.Models.Country", "Citizenship")
                        .WithMany("Employees")
                        .HasForeignKey("CitizenshipId");

                    b.HasOne("HRMS.Database.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("HRMS.Database.Models.Education", "Education")
                        .WithMany("Employees")
                        .HasForeignKey("EducationId");

                    b.Navigation("BirthPlace");

                    b.Navigation("Citizenship");

                    b.Navigation("City");

                    b.Navigation("Education");
                });

            modelBuilder.Entity("HRMS.Database.Models.EmployeePosition", b =>
                {
                    b.HasOne("HRMS.Database.Models.Employee", "Employee")
                        .WithMany("EmployeePositions")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HRMS.Database.Models.Position", "Position")
                        .WithMany("EmployeePositions")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("HRMS.Database.Models.EmployeeRole", b =>
                {
                    b.HasOne("HRMS.Database.Models.Employee", "Employee")
                        .WithMany("Roles")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("HRMS.Database.Models.Event", b =>
                {
                    b.HasOne("HRMS.Database.Models.Employee", "Employee")
                        .WithMany("Events")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HRMS.Database.Models.EventType", "EventType")
                        .WithMany("Events")
                        .HasForeignKey("EventTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("HRMS.Database.Models.Message", b =>
                {
                    b.HasOne("HRMS.Database.Models.Employee", "Employee")
                        .WithMany("Messages")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("HRMS.Database.Models.Position", b =>
                {
                    b.HasOne("HRMS.Database.Models.Department", "Department")
                        .WithMany("Positions")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HRMS.Database.Models.PayGrade", "PayGrade")
                        .WithMany("Positions")
                        .HasForeignKey("PayGradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HRMS.Database.Models.Education", "RequiredEducation")
                        .WithMany("Positions")
                        .HasForeignKey("RequiredEducationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("PayGrade");

                    b.Navigation("RequiredEducation");
                });

            modelBuilder.Entity("HRMS.Database.Models.Task", b =>
                {
                    b.HasOne("HRMS.Database.Models.Employee", "Employee")
                        .WithMany("Tasks")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("HRMS.Database.Models.Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId");

                    b.HasOne("HRMS.Database.Models.TaskStatus", "Status")
                        .WithMany("Tasks")
                        .HasForeignKey("TaskStatusId");

                    b.HasOne("HRMS.Database.Models.TaskType", "Type")
                        .WithMany("Tasks")
                        .HasForeignKey("TaskTypeId");

                    b.Navigation("Employee");

                    b.Navigation("Project");

                    b.Navigation("Status");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("HRMS.Database.Models.TaskComment", b =>
                {
                    b.HasOne("HRMS.Database.Models.Employee", "Employee")
                        .WithMany("TaskComments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HRMS.Database.Models.Task", "Task")
                        .WithMany("TaskComments")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("HRMS.Database.Models.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("HRMS.Database.Models.Department", b =>
                {
                    b.Navigation("ChildDepartments");

                    b.Navigation("Positions");
                });

            modelBuilder.Entity("HRMS.Database.Models.Education", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Positions");
                });

            modelBuilder.Entity("HRMS.Database.Models.Employee", b =>
                {
                    b.Navigation("Departments");

                    b.Navigation("EmployeePositions");

                    b.Navigation("Events");

                    b.Navigation("Messages");

                    b.Navigation("Roles");

                    b.Navigation("TaskComments");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("HRMS.Database.Models.EventType", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("HRMS.Database.Models.PayGrade", b =>
                {
                    b.Navigation("Positions");
                });

            modelBuilder.Entity("HRMS.Database.Models.Position", b =>
                {
                    b.Navigation("EmployeePositions");
                });

            modelBuilder.Entity("HRMS.Database.Models.Project", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("HRMS.Database.Models.Task", b =>
                {
                    b.Navigation("TaskComments");
                });

            modelBuilder.Entity("HRMS.Database.Models.TaskStatus", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("HRMS.Database.Models.TaskType", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
